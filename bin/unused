#!/usr/bin/env node
/**
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

var fs = require('fs');

var optimist = require('optimist')
    .usage('Usage: unused [--ignore-params <param 1,param 2,param n..>] <file 1> <file 2> <file n>')
    .string('ignore-params')
    .describe('ignore-params', 'comma separated list of unused function parameters to ignore');
var argv = optimist.argv;

var unused = require('../');

if (argv.help || argv._.length === 0) {
    console.log(optimist.help())
    process.exit(1);
}

var ignore_params = (argv['ignore-params'] || '').split(',');

var errors = 0;
argv._.forEach(function(path) {

    try {
        var unused_vars = unused(fs.readFileSync(path, 'utf8'));
    }
    catch (e) {
        return console.dir(e);
    }

    // sort by line number
    unused_vars.sort(function(left, right) {
        return left.loc.line - right.loc.line;
    });

    unused_vars = unused_vars.filter(function(variable) {
        if (variable.param && ignore_params.indexOf(variable.name) >= 0) {
            return false;
        }

        return true;
    });

    // only show the path if there are unused variables
    // silent otherwise
    if (unused_vars.length > 0) {
        console.log(path);
    }

    unused_vars.forEach(function(variable) {
        if (variable.param && ignore_params.indexOf(variable.name) >= 0) {
            return;
        }

        console.log('\t%s - on line %s', variable.name, variable.loc.line);
    });

    errors += unused_vars.length;
});

// exit with -1 to indicate unused vars exist
// useful if used as a git commit hook or other script to detect failure
// failure is defined by the existence of unused variables
if (errors > 0) {
    process.exit(-1);
}

// vim: ft=javascript
